package com.ufc.uif.qh3.acad.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.dom4j.Element;

import com.ufc.uif.base_adaptor.AdaptorWriter;
import com.ufc.uif.qh3.acad.drawing.ClassifiTableModel;
import com.ufc.uif.qh3.acad.drawing.ClassifiTreeCellRender;
import com.ufc.uif.qh3.acad.operation.ParseConfigXMl;
import com.ufc.uif.tccommunicationimpl.object.ClassifiAttribute;
import com.ufc.uif.tccommunicationimpl.object.ClassifiClass;
import com.ufc.uif.tccommunicationimpl.object.ClassifiObject;
import com.ufc.uif.tccommunicationimpl.operation.TCClassificationOperation; //import com.ufc.uif.tcuacommunication.objects.ClassifiAttribute;
//import com.ufc.uif.tcuacommunication.objects.ClassifiClass;
//import com.ufc.uif.tcuacommunication.objects.ClassifiObject;
import com.ufc.uif.tcuacommunication.objects.LOVsValue;
import com.ufc.uif.tcuacommunication.objects.WSObject;
import com.ufc.uif.tcuacommunication.operation.ITCTCObjOperation;
import com.ufc.uif.tcuacommunication.operation.exception.TCOperationException;
import com.ufc.uif.util.service.ServiceUtil;

/**
 *
 * @author Liugz
 */
public class ClassificationPanel extends JPanel {

  private static final long serialVersionUID = -3634956687688133397L;

  /** Creates new form ClassificationFrame */

  private String queryType = "";

  public String getQueryType() {
    return queryType;
  }

  public void setQueryType(String queryType) {
    this.queryType = queryType;
  }

  public ClassificationPanel(JFrame frame, String queryType) {
    System.out.println("207XTCAD----ClassificationPanel-----------ClassificationPanel");
    // super(frame, "Classification", true);
    this.frame = frame;
    this.queryType = queryType;
    initDialog();
  }

  public ClassificationPanel(String queryType) {
    System.out.println("207XTCAD----ClassificationPanel-----------ClassificationPanel");
    this.queryType = queryType;
    initDialog();
  }

  public void initDialog() {
    System.out.println("207XTCAD----ClassificationPanel-----------initDialog");
    initComponents();
    initJTree();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() {
    System.out.println("207XTCAD----ClassificationPanel-----------initComponents");
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    treePanel = new javax.swing.JScrollPane();
    classifiObjTree = new javax.swing.JTree();
    jSplitPane2 = new javax.swing.JSplitPane();
    jPanel2 = new javax.swing.JPanel();
    attribsPanel = new javax.swing.JScrollPane();
    attribPanel = new javax.swing.JPanel();
    buttonPanel = new javax.swing.JPanel();
    clsBtn = new javax.swing.JButton();
    schBtn = new javax.swing.JButton();
    jPanel3 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    tablePanel = new javax.swing.JScrollPane();
    wsObjTable = new javax.swing.JTable();
    buttonPanel1 = new javax.swing.JPanel();
    cancelBtn = new javax.swing.JButton();
    okBtn = new javax.swing.JButton();

    setBackground(new java.awt.Color(226, 245, 252));

    jSplitPane1.setName("jSplitPane1"); // NOI18N
    jSplitPane1.setOneTouchExpandable(true);
    jSplitPane1.setDividerLocation(210);

    jPanel1.setBackground(new java.awt.Color(226, 245, 252));
    jPanel1.setName("jPanel1"); // NOI18N
    jPanel1.setPreferredSize(new Dimension(190, 600));

    treePanel.setBackground(new java.awt.Color(241, 250, 255));
    treePanel.setName("treePanel"); // NOI18N
    classifiObjTree.addTreeSelectionListener(new TreeSelectionListener() {
      public void valueChanged(TreeSelectionEvent event) {
        treeSelectionAction(event);
      }
    });

    classifiObjTree.setBackground(new java.awt.Color(241, 250, 255));
    classifiObjTree.setName("classifiObjTree"); // NOI18N
    treePanel.setViewportView(classifiObjTree);

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        jPanel1Layout.createSequentialGroup().addContainerGap().add(treePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE).addContainerGap()));
    jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        jPanel1Layout.createSequentialGroup().addContainerGap().add(treePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE).addContainerGap()));

    jSplitPane1.setLeftComponent(jPanel1);

    jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane2.setName("jSplitPane2"); // NOI18N
    jSplitPane2.setDividerLocation(210);

    jPanel2.setBackground(new java.awt.Color(226, 245, 252));
    jPanel2.setName("jPanel2"); // NOI18N

    attribsPanel.setBackground(new java.awt.Color(226, 245, 252));
    attribsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("分类搜索条件"));
    attribsPanel.setAutoscrolls(true);
    attribsPanel.setName("attribsPanel"); // NOI18N
    attribsPanel.setOpaque(false);

    attribPanel.setBackground(new java.awt.Color(241, 250, 255));
    attribPanel.setName("attribPanel"); // NOI18N
    // attribPanel.setLayout(new java.awt.GridLayout(2, 2));
    attribsPanel.setViewportView(attribPanel);

    buttonPanel.setBackground(new java.awt.Color(226, 245, 252));
    buttonPanel.setName("buttonPanel"); // NOI18N

    clsBtn.setText("清除");
    clsBtn.setName("clsBtn"); // NOI18N
    clsBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clsBtnActionPerformed(evt);
      }
    });

    schBtn.setText("搜索");
    schBtn.setName("schBtn"); // NOI18N
    schBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        schBtnActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout buttonPanelLayout = new org.jdesktop.layout.GroupLayout(buttonPanel);
    buttonPanel.setLayout(buttonPanelLayout);
    buttonPanelLayout.setHorizontalGroup(buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,
        buttonPanelLayout.createSequentialGroup().addContainerGap(406, Short.MAX_VALUE).add(schBtn).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(clsBtn).addContainerGap()));
    buttonPanelLayout.setVerticalGroup(buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(clsBtn).add(schBtn)));

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(attribsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540,
        Short.MAX_VALUE).add(buttonPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        org.jdesktop.layout.GroupLayout.TRAILING,
        jPanel2Layout.createSequentialGroup().add(attribsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(buttonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

    jSplitPane2.setTopComponent(jPanel2);

    jPanel3.setBackground(new java.awt.Color(226, 245, 252));
    jPanel3.setName("jPanel3"); // NOI18N

    jPanel4.setBackground(new java.awt.Color(226, 245, 252));
    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("分类对象"));
    jPanel4.setName("jPanel4"); // NOI18N

    tablePanel.setBackground(new java.awt.Color(241, 250, 255));
    tablePanel.setAutoscrolls(true);
    tablePanel.setName("tablePanel"); // NOI18N

    wsObjTable.setBackground(new java.awt.Color(241, 250, 255));
    // wsObjTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    wsObjTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    wsObjTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    wsObjTable.setName("wsObjTable"); // NOI18N
    // wsObjTable.setPreferredScrollableViewportSize(jPanel4.getSize());
    tablePanel.setViewportView(wsObjTable);

    org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout
        .setHorizontalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tablePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE));
    jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tablePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE));

    buttonPanel1.setBackground(new java.awt.Color(226, 245, 252));
    buttonPanel1.setName("buttonPanel1"); // NOI18N

    cancelBtn.setText("关闭");
    cancelBtn.setName("cancelBtn"); // NOI18N
    cancelBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelBtnActionPerformed(evt);
      }

    });

    okBtn.setText("确定");
    okBtn.setName("okBtn"); // NOI18N
    okBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okBtnActionPerformed(evt);
      }

    });

    org.jdesktop.layout.GroupLayout buttonPanel1Layout = new org.jdesktop.layout.GroupLayout(buttonPanel1);
    buttonPanel1.setLayout(buttonPanel1Layout);
    buttonPanel1Layout.setHorizontalGroup(buttonPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(
            org.jdesktop.layout.GroupLayout.TRAILING,
            buttonPanel1Layout.createSequentialGroup().addContainerGap(386, Short.MAX_VALUE).add(okBtn).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(cancelBtn)
                .addContainerGap()));
    buttonPanel1Layout.setVerticalGroup(buttonPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        buttonPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(cancelBtn).add(okBtn)));

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(buttonPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
        Short.MAX_VALUE));
    jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
        jPanel3Layout.createSequentialGroup().add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(
            org.jdesktop.layout.LayoutStyle.RELATED).add(buttonPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));

    jSplitPane2.setRightComponent(jPanel3);

    jSplitPane1.setRightComponent(jSplitPane2);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    setLayout(layout);

    // 增加注释信息
    Memo();
    //
    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE));
    layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE));

  }// </editor-fold>

  /**
   * @author zhangwh
   * @功能 增加颜色注释信息
   * @Date 2012-11-14
   */
  private void Memo() {
    System.out.println("207XTCAD----ClassificationPanel-----------Memo");
    setLayout(new BorderLayout());
    Color color;
    // 注释信息----/2012-11-14 zhangwh
    JPanel jpanel = new JPanel();
    jpanel.setBackground(new Color(226, 245, 252));
    jpanel.setLayout(new FlowLayout());

    JLabel l1 = new JLabel("000");
    l1.setBackground(Color.GREEN);
    l1.setForeground(Color.GREEN);
    l1.setOpaque(true);
    jpanel.add(l1);

    JLabel l11 = new JLabel("优选");
    jpanel.add(l11);

    JLabel l2 = new JLabel("000");
    color = new Color(191, 214, 248);
    l2.setBackground(color);
    l2.setForeground(color);
    l2.setOpaque(true);
    jpanel.add(l2);

    JLabel l22 = new JLabel("推荐");
    jpanel.add(l22);

    JLabel l3 = new JLabel("000");
    color = new Color(241, 250, 255);
    l3.setBackground(color);
    l3.setForeground(color);
    l3.setOpaque(true);
    jpanel.add(l3);

    JLabel l33 = new JLabel("可用");
    jpanel.add(l33);

    JLabel l4 = new JLabel("000");
    color = new Color(241, 200, 245);
    l4.setBackground(color);
    l4.setForeground(color);
    l4.setOpaque(true);
    jpanel.add(l4);

    JLabel l44 = new JLabel("限用");
    jpanel.add(l44);

    JLabel l5 = new JLabel("000");

    l5.setBackground(Color.lightGray);
    l5.setForeground(Color.lightGray);
    l5.setOpaque(true);
    jpanel.add(l5);

    JLabel l55 = new JLabel("试用");
    jpanel.add(l55);

    JLabel l6 = new JLabel("000");
    l6.setBackground(Color.red);
    l6.setForeground(Color.red);
    l6.setOpaque(true);
    jpanel.add(l6);

    JLabel l66 = new JLabel("禁用");
    jpanel.add(l66);

    add(jpanel, BorderLayout.NORTH);
  }

  /**
   * 初始化JTree This project for CAD_Concrete
   */
  private void initJTree() {
    System.out.println("207XTCAD----ClassificationPanel-----------initJTree");
    ClassifiTreeCellRender render = new ClassifiTreeCellRender();
    root = new DefaultMutableTreeNode("Classification Root");
    List<ClassifiClass> subRoot = cfop.getClassificationRoot("ICM");
    for (Iterator<ClassifiClass> itor = subRoot.iterator(); itor.hasNext();) {
      ClassifiClass clClass = itor.next();
      DefaultMutableTreeNode node = new DefaultMutableTreeNode(clClass);
      if (queryType.equals("材料")) {
        if (node.getUserObject().toString().contains("材料")) {
          root.add(node);
          break;
        }
      } else {
//        if (!node.getUserObject().toString().contains("材料")) {
          root.add(node);
//        }
      }
    }
    treeModel = new DefaultTreeModel(root);
    classifiObjTree.setModel(treeModel);
    classifiObjTree.setCellRenderer(render);
    // classifiObjTree.setRootVisible(true);
    classifiObjTree.setExpandsSelectedPaths(true);
    classifiObjTree.setScrollsOnExpand(true);

    tableRender = new WorkspaceTableRender();
    wsObjTable.setDefaultRenderer(String.class, tableRender);

    // 设置attribPanel的布局管理器
    // attribPanel.setLayout(new BorderLayout());
  }

  /**
   * 选择树节点时的操作
   *
   * @author Liugz
   * @create on 2009-3-12 This project for CAD_Concrete
   * @param event
   */
  protected void treeSelectionAction(TreeSelectionEvent event) {
    System.out.println("207XTCAD----ClassificationPanel-----------treeSelectionAction");
    // stateDlg = new StateDialog(frame, false, "正在载入内容，请稍候……");
    Thread thread = new Thread(new Runnable() {

      public void run() {
        if (waitDlg != null)
          waitDlg.dispose();

        waitDlg = new WaitDialog(frame, false);
        frame.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        findSubNodes();
        frame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        waitDlg.dispose();
      }

    });
    thread.start();
  }

  /**
   * 点击树节点时，查询其子节点
   *
   * @author Liugz
   * @create on 2009-3-4 This project for tc_communication.teamcenter2007
   */
  public void findSubNodes() {
    System.out.println("207XTCAD----ClassificationPanel-----------findSubNodes");
    TreePath selecPath = classifiObjTree.getSelectionPath();
    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) classifiObjTree.getSelectionPath().getLastPathComponent();
    Object nodeObj = selectedNode.getUserObject();
    if (nodeObj instanceof ClassifiClass) {
      ClassifiClass clazzNode = (ClassifiClass) nodeObj;
      //if (clazzNode.getAttributes() != null && clazzNode.getAttributes().length > 0)
        if (clazzNode.getChildCount() > 0) { // (!"StorageClass".equalsIgnoreCase(clazzNode.getType()))
          System.out.println("--------------------------0");
          selectedNode.removeAllChildren();
          // classifiObjTree.updateUI();
          List<ClassifiClass> subRoot = cfop.getClassificationRoot(clazzNode.getId());
          for (Iterator<ClassifiClass> itor = subRoot.iterator(); itor.hasNext();) {
            ClassifiClass clClass = itor.next();
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(clClass);
            selectedNode.add(node);
          }

        } else {
        if (null != clazzNode.getAttributes() && clazzNode.getAttributes().length != 0) {
          System.out.println("--------------------------1");
          ClassifiAttribute[] attributes = clazzNode.getAttributes();
          { // 设置搜索条件Panel
            int attribLen = attributes.length;
            attribPanel.removeAll();
            // 设置搜索条件的布局
            // attribPanel.setLayout(new GridLayout(attribLen, 2, 2,
            // 2));
            attribPanel.setLayout(new GridBagLayout());
            GridBagConstraints c = new GridBagConstraints();
            c.fill = GridBagConstraints.HORIZONTAL; // components
            // grow in both
            // dimensions
            c.insets = new Insets(5, 5, 5, 5); // 5-pixel margins on
            // all sides

            // 对分类属性进行排序 xtb by 20121227
            List<ClassifiAttribute> listAttrib0 = new ArrayList<ClassifiAttribute>();
            List<ClassifiAttribute> listAttrib1 = new ArrayList<ClassifiAttribute>();
            List<ClassifiAttribute> listAttrib2 = new ArrayList<ClassifiAttribute>();

            for (int i = 0; i < attribLen; i++) {
              ClassifiAttribute attrib = attributes[i];
              System.out.println("name="+attrib.getName());
              System.out.println("id="+attrib.getId());

              if ("简称".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("型号".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("库来源".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("器材状态".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("执行标准".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("物资编码".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else if ("是否进口".equals(attrib.getName())) {
                listAttrib1.add(attrib);
              } else {
                listAttrib2.add(attrib);
              }
            }
//            String str = "";
//            for (int j = 0; j < 7; j++) {
//              if (j == 0) {
//                str = "简称";
//              }
//              if (j == 1) {
//                str = "型号";
//              }
//              if (j == 2) {
//                str = "库来源";
//              }
//              if (j == 3) {
//                str = "器材状态";
//              }
//              if (j == 4) {
//                str = "执行标准";
//              }
//              if (j == 5) {
//                str = "物资编码";
//              }
//              if (j == 6) {
//                str = "是否进口";
//              }
              for (ClassifiAttribute bute : listAttrib1) {
//                if (str.equals(bute.getName())) {
                  listAttrib0.add(bute);
//                  break;
//                }
              }
//            }
            for (ClassifiAttribute bute : listAttrib2) {
              listAttrib0.add(bute);
            }

            // 对分类属性进行排序 xtb by 20121227 end
            for (int k = 0; k < attribLen; k++) {
              ClassifiAttribute attrib = listAttrib0.get(k);
              if (attrib.getFormatType() >= 0) { // JTextField类型

//                if ("库来源".equals(attrib.getName()) || "器材状态".equals(attrib.getName()) || "是否进口".equals(attrib.getName())) {
//
//                  String listValue[] = null;
//                  String strValue = "";
//                  if ("库来源".equals(attrib.getName())) {
//                    listValue = new String[] { "", "器材库", "历史库" };
//                    strValue = "器材库";
//                  } else if ("器材状态".equals(attrib.getName())) {
//                    listValue = new String[] { "", "优选", "推荐", "可用", "限用", "试用", "禁用" };
//                    strValue = "";
//                  } else {
//                    listValue = new String[] { "", "国产", "进口" };
//                    strValue = "国产";
//                  }
//                  c.gridx = 0;
//                  c.gridy = k;
//                  c.gridwidth = 1;
//                  c.gridheight = 1;
//                  JLabel label = new JLabel(attrib.getName());
//                  attribPanel.add(label, c);
//
//                  c.gridx = 1;
//                  c.gridy = k;
//                  c.gridwidth = 1;
//                  c.gridheight = 1;
//
//                  final JTextField qc = new JTextField();
//                  qc.setVisible(false);
//                  qc.setPreferredSize(prefSize);
//                  qc.setText(strValue);
//                  attribPanel.add(qc, c);
//                  qc.setName(Integer.toString(attrib.getId()));
//
//                  final JComboBox jc = new JComboBox(listValue);
//
//                  jc.setSelectedIndex(1);
//
//                  jc.addItemListener(new ItemListener() {
//
//                    @Override
//                    public void itemStateChanged(ItemEvent e) {
//                      if (e.getStateChange() == ItemEvent.SELECTED) {
//                        qc.setText((String) jc.getSelectedItem());
//                      }
//                    }
//                  });
//
//                  attribPanel.add(jc, c);
//                  c.gridx = 2;
//                  c.gridy = k;
//                  c.gridwidth = 1;
//                  c.gridheight = 1;
//                  JLabel label2 = new JLabel(attrib.getUnitName());
//                  attribPanel.add(label2, c);
//
//                } else {
                  c.gridx = 0;
                  c.gridy = k;
                  c.gridwidth = 1;
                  c.gridheight = 1;
                  JLabel label = new JLabel(attrib.getName());
                  attribPanel.add(label, c);

                  c.gridx = 1;
                  c.gridy = k;
                  c.gridwidth = 1;
                  c.gridheight = 1;

                  JTextField text = new JTextField();
                  text.setPreferredSize(prefSize);
                  attribPanel.add(text, c);
                  text.setName(Integer.toString(attrib.getId()));

                  c.gridx = 2;
                  c.gridy = k;
                  c.gridwidth = 1;
                  c.gridheight = 1;
                  JLabel label2 = new JLabel(attrib.getUnitName());
                  attribPanel.add(label2, c);
//                }
              } else { // JComboBox类型
                c.gridx = 0;
                c.gridy = k;
                c.gridwidth = 1;
                c.gridheight = 1;
                JLabel label = new JLabel(attrib.getName());
                attribPanel.add(label, c);
                // 获取LOV值
                LOVsValue[] lovs = cfop.getLOVOfAttribute(attrib.getFormatLength());
                // 将值添加到ComboBox中
                JComboBox combo = new JComboBox(lovs);
                c.gridx = 1;
                c.gridy = k;
                c.gridwidth = 1;
                c.gridheight = 1;
                combo.addItem(" ");
                combo.setPreferredSize(prefSize);
                combo.setName(Integer.toString(attrib.getId()));
                combo.setSelectedItem(" ");
                attribPanel.add(combo, c);
              }
            }
          }

          { // 设置Table表格
            tableModel = new ClassifiTableModel(attributes);
            wsObjTable.setModel(tableModel);
            wsObjTable.setRowSorter(new TableRowSorter<TableModel>(wsObjTable.getModel()));
            wsObjTable.updateUI();
          }
        }
      }
    } else {
      System.out.println("is not ClassifiClass");
    }
    attribPanel.validate();
    attribPanel.updateUI();
    classifiObjTree.expandPath(selecPath);
  }





  /**
   * @param args
   *            the command line arguments
   */
  public static void main(String args[]) {
    // java.awt.EventQueue.invokeLater(new Runnable() {
    // public void run() {
    // new ClassificationFrame().setVisible(true);
    // }
    // });
    // ClassificationFrame frame = new ClassificationFrame(null);
    // frame.initDialog();

  }

  // Variables declaration - do not modify
  private javax.swing.JPanel attribPanel;
  private javax.swing.JScrollPane attribsPanel;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JPanel buttonPanel1;
  private javax.swing.JButton cancelBtn;
  private javax.swing.JTree classifiObjTree;
  private javax.swing.JButton clsBtn;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JButton okBtn;
  private javax.swing.JButton schBtn;
  private javax.swing.JScrollPane tablePanel;
  private javax.swing.JScrollPane treePanel;
  private javax.swing.JTable wsObjTable;

  // End of variables declaration

  private void clsBtnActionPerformed(ActionEvent evt) {
    System.out.println("207XTCAD----ClassificationPanel-----------clsBtnActionPerformed");
    // TODO Auto-generated method stub
    resetAttribPanel();
    clearTablePanel();
  }

  private void schBtnActionPerformed(ActionEvent evt) {
    System.out.println("207XTCAD----ClassificationPanel-----------schBtnActionPerformed");
    Thread thread = new Thread(new Runnable() {
      public void run() {
        if (waitDlg != null)
          waitDlg.dispose();

        // DefaultMutableTreeNode seleNode = (DefaultMutableTreeNode)
        // classifiObjTree.getSelectionPath().getLastPathComponent();
        // ClassifiClass clazz = (ClassifiClass)
        // seleNode.getUserObject();
        // String type = clazz.getType();
        // int childcnt = clazz.getChildCount();
        /*
         * if((!"StorageClass".equalsIgnoreCase(type) &&
         * !"SubClass".equalsIgnoreCase(type)) || childcnt != 0){
         * JOptionPane.showMessageDialog(frame, "请选择叶子节点进行查询！", "提示",
         * JOptionPane.INFORMATION_MESSAGE); return ; }
         */
        waitDlg = new WaitDialog(frame, false);
        waitDlg.setMessage("正在进行操作，请稍候……");
        frame.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        queryClassificationObject();
        frame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        waitDlg.dispose();

      }
    });
    thread.start();
  }

  // public void doOperation(Element requestBody, AdaptorWriter out)
  // throws BusiOperationException {
  // this.requestBody = requestBody;
  // this.out = out;
  // // LiugzTodo
  // initDialog();
  // }



  /**
   * 关闭窗口
   *
   * @author Liugz
   * @create on 2008-12-22 This project for CYM
   */
  public void closeWindow() {
    try {
      out.setFuncID("QueryItem");
      out.setResult("CloseWindow");
      out.setDesc("用户取消操作。");
      out.sendResultToUI();
    } catch (IOException ex) {
      ex.printStackTrace();
    }
    frame.dispose();
  }



  public void refreshTree() {
    System.out.println("207XTCAD----ClassificationPanel-----------refreshTree");
    root.removeAllChildren();
    List<ClassifiClass> subRoot = cfop.getClassificationRoot("ICM");
    for (Iterator<ClassifiClass> itor = subRoot.iterator(); itor.hasNext();) {
      ClassifiClass clClass = itor.next();
      DefaultMutableTreeNode node = new DefaultMutableTreeNode(clClass);
      if (queryType.equals("材料")) {
        if (node.getUserObject().toString().contains("材料")) {
          root.add(node);
          break;
        }
      } else {
        //if (!node.getUserObject().toString().contains("材料")) {
          root.add(node);
        //}
      }

    }

    classifiObjTree.updateUI();
  }



  /**
   * 根据查询条件查找ClassificationObject信息
   *
   * @author Liugz
   * @create on 2009-3-6 This project for tc_communication.teamcenter2007
   */
  private void queryClassificationObject() {
    System.out.println("207XTCAD----ClassificationPanel-----------queryClassificationObject");
    // 获取ClassificationClass的ClassId
    DefaultMutableTreeNode seleNode = (DefaultMutableTreeNode) classifiObjTree.getSelectionPath().getLastPathComponent();
    ClassifiClass clazz = (ClassifiClass) seleNode.getUserObject();
    // String type = clazz.getType();
    // int childcnt = clazz.getChildCount();
    // if((!"StorageClass".equalsIgnoreCase(type) &&
    // !"SubClass".equalsIgnoreCase(type)) || childcnt != 0){
    // JOptionPane.showMessageDialog(this, "请选择叶子节点进行查询！", "提示",
    // JOptionPane.INFORMATION_MESSAGE);
    // return ;
    // }

    // 收集页面上的信息，组成attributId=attributeValue的键值对
    Map<String, String> infos = new HashMap<String, String>();
    collectSearchInfo(attribPanel, infos);

    // 开始查询ClassificationObject
    List<ClassifiObject> clfObjs = cfop.queryClassificationObjects(clazz, infos);

    // 刷新表格
    // if(null != clfObjs && clfObjs.size() != 0){
    // tableModel.setClfObjs(clfObjs);
    // }
    tableModel.setClfObjs(clfObjs);
    wsObjTable.validate();
    wsObjTable.setRowSorter(new TableRowSorter<TableModel>(wsObjTable.getModel()));
    wsObjTable.updateUI();

  }

  /**
   * @author Liugz
   * @create on 2009-3-6 This project for tc_communication.teamcenter2007
   */
  private void collectSearchInfo(JComponent comp, Map<String, String> infos) {
    System.out.println("207XTCAD----ClassificationPanel-----------collectSearchInfo");
    Component[] comps = comp.getComponents();
    for (int i = 0; i < comps.length; i++) {
      Component compon = comps[i];
      if (compon instanceof JTextComponent)
        infos.put(compon.getName(), ((JTextComponent) compon).getText());
      else if (compon instanceof JComboBox) {
        Object seleObj = ((JComboBox) compon).getSelectedItem();
        if (seleObj instanceof LOVsValue) {
          infos.put(compon.getName(), ((LOVsValue) seleObj).getDbValue());
        }
      }
    }
  }

  /**
   * 清除表格中的内容
   *
   * @author Liugz
   * @create on 2009-3-8 This project for tc_communication.teamcenter2007
   */
  private void clearTablePanel() {
    System.out.println("207XTCAD----ClassificationPanel-----------clearTablePanel");
    // 清除表格中的内容
    tableModel.setClfObjs(null);
    wsObjTable.validate();
    wsObjTable.updateUI();
  }

  /**
   * 清空搜索条件对话框中的内容
   *
   * @author Liugz
   * @create on 2009-3-8 This project for tc_communication.teamcenter2007
   */
  private void resetAttribPanel() {
    System.out.println("207XTCAD----ClassificationPanel-----------resetAttribPanel");
    Component[] comps = attribPanel.getComponents();
    if (null == comps || comps.length == 0) {
      return;
    }
    for (Component comp : comps) {
      if (comp instanceof JTextComponent) {
        ((JTextComponent) comp).setText("");
      }
      if (comp instanceof JComboBox) {
        ((JComboBox) comp).setSelectedItem(" ");
      }
    }
  }

  /**
   * 为ComboBox添加信息
   *
   * @author Liugz
   * @create on 2009-3-7 This project for tc_communication.teamcenter2007
   * @param comp
   * @param items
   */
  // private void addItems(JComponent comp, Object[] items) {
  // if (null == items || items.length == 0) {
  // return;
  // }
  // if (comp instanceof JComboBox) {
  // // 先清空列表
  // // ((JComboBox)comp).removeAllItems();
  // for (Object item : items) {
  // ((JComboBox) comp).addItem(item);
  // }
  // }
  // }

  /**
   *
   * @author Liugz
   * @create on 2009-3-9 This project for CAD_Concrete
   * @param evt
   */
  private void cancelBtnActionPerformed(ActionEvent evt) {
    // 关闭按钮
    int r = JOptionPane.showConfirmDialog(this, "您尚未完成操作，确认退出？", "提示", JOptionPane.YES_NO_CANCEL_OPTION);
    if (r == JOptionPane.OK_OPTION) {
      closeWindow();
    } else
      return;
  }

  /**
   *
   * @author Liugz
   * @create on 2009-3-9 This project for CAD_Concrete
   * @param evt
   */
  private void okBtnActionPerformed(ActionEvent evt) {
    System.out.println("207XTCAD----ClassificationPanel-----------okBtnActionPerformed");
    // 确定按钮
    int row = wsObjTable.getSelectedRow();

    if (wsObjTable.getRowCount() != 0 && row != -1) {
    	String itemId = null;
		String wuziname = "";
		String productID = "";
		for (int col = 0; col < wsObjTable.getColumnCount(); col++) {
			String colName = wsObjTable.getColumnName(col);
			if ("对象 ID".equals(colName)) {
				String tempId = (String) wsObjTable.getValueAt(row, col);
				if (tempId.contains("/")) {
					itemId = tempId.split("/")[0];
				} else {
					itemId = tempId;
				}

				//break;
			}
			if("物资名称".equals(colName)){
				wuziname = (String) wsObjTable.getValueAt(row, col);
			}
			if("产品标准号".equals(colName)){
				productID = (String) wsObjTable.getValueAt(row, col);
				if(productID==null){
					productID = "";
				}
			}
		}

		try {
			WSObject[] itemObj = tcop.queryObjectsBySavedQuery("Item ID", new String[] { itemId });
			WSObject itemRev = tcop.getItemRevision(itemObj[0], "Last");
			// String itemname = itemRev.getName();

			Map<String, String> attrib = getDisNameValueMap(itemRev);
			// duzl
			attrib.put("名称", wuziname);
			attrib.put("代号", productID);
			System.out.println("====================================");
			System.out.println(attrib);
			System.out.println("====================================");
			getResponseXML(attrib);
		} catch (TCOperationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    } else {
      JOptionPane.showMessageDialog(this, "您尚未选择要返回的数据，请选择要返回的数据！", "提示", JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    frame.dispose();
  }

  private Map<String, String> getDisNameValueMap(WSObject wsObj) {
    System.out.println("207XTCAD----ClassificationPanel-----------getDisNameValueMap");
    Map<String, String> resultDisNameValueMap = new HashMap<String, String>();
    String UFCROOT = System.getenv("UFCROOT");
    String fileSeparator = System.getProperty("file.separator");
    String configFilePath = UFCROOT + fileSeparator + "AutoCAD" + fileSeparator + "cfg" + fileSeparator + "fillBackInfo.xml";

    ParseConfigXMl parseCfg = new ParseConfigXMl();
    Element rootNode = parseCfg.getRootNode(configFilePath);
    Map<String, List<Map<String, String>>> msgInfo = parseCfg.getSendMsgInfo(rootNode);

    String objectType = wsObj.getType();
    List<Map<String, String>> sendMsgMapList = msgInfo.get(objectType);

    for (int i = 0; i < sendMsgMapList.size(); i++) {
      Map<String, String> sendMsgMap = sendMsgMapList.get(i);
      String displayName = sendMsgMap.get("displayName");
      String property = sendMsgMap.get("property");
      String separator = sendMsgMap.get("separator");

      String value = "";

      String[] propertyArr = property.split(",");
      for (int j = 0; j < propertyArr.length; j++) {
        String tempProperty = propertyArr[j];
        if (tempProperty.trim().length() > 0) {
          String tempValue = tcop.getPropertyValueOfObject(wsObj, tempProperty);
          if (tempValue.trim().length() > 0) {
            if (value.trim().length() > 0) {
              value = value + separator + tempValue;
            } else {
              value = tempValue;
            }
          }
        }
      }
      resultDisNameValueMap.put(displayName, value);
    }
    return resultDisNameValueMap;
  }

  /**
   *
   * TODO 查询请求会送消息生成
   *
   * @return void
   * @author lijj created on 2011-9-2下午02:23:04
   */
  private void getResponseXML(Map<String, String> infos) {
    System.out.println("207XTCAD----ClassificationPanel-----------getResponseXML");
    // 修改请求中的信息

    out.setFuncID("doQuery");
    out.setResult("true");
    out.setDesc("Backfill CAD Drawing.");
    Element objectEle = out.getObjectElement();
    // objectEle.addAttribute("type", type);

    Element props = objectEle.addElement("properties");
    /*
     * Element proID = props.addElement("property");
     * proID.addAttribute("name","item_id"); proID.addAttribute("value",id
     * );
     *
     * Element proName = props.addElement("property");
     * proName.addAttribute("name","名称"); proName.addAttribute("value",
     * itemName);
     */
    for (Iterator<String> keyItor = infos.keySet().iterator(); keyItor.hasNext();) {
      String key = keyItor.next();
      String value = infos.get(key);

      Element proInfo = props.addElement("property");
      proInfo.addAttribute("name", key);
      proInfo.addAttribute("value", value);
    }

    try {
      out.sendResultToUI();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * 将对话框信息反填回CAD图纸
   *
   * @author Liugz
   * @create on 2009-2-25 This project for CAD_Concrete
   * @return
   */
  /*
   * private void backfillCADDrawing(Map<String, String> infos,String
   * itemId,String itemname,String type) { // 修改请求中的信息
   * if(type.contains("Cetc20STPart")){ type="标准件"; }else
   * if(type.contains("Cetc20Stuff")){ type="辅料"; }else
   * if(type.contains("Cetc20Comp")){ type="元器件"; }
   * out.setFuncID("QueryItem"); out.setResult("true");
   * out.setDesc("Backfill CAD Drawing."); Element object2 =
   * out.getObjectElement(); object2.addAttribute("type", type); Element props
   * = object2.addElement("properties"); Set<String> keys=infos.keySet();
   * Object[] ks=keys.toArray(); Element pro=props.addElement("property");
   * pro.addAttribute("name","item_id"); pro.addAttribute("value",itemId );
   * Element proname=props.addElement("property"); if(type.equals("元器件")){
   * proname.addAttribute("name","名称"); if(infos.get("器材简称")!=null){
   *
   * proname.addAttribute("value",infos.get("器材简称") ); }else{
   * proname.addAttribute("value",""); } for(int i=0;i<ks.length;i++){ Element
   * pro1=props.addElement("property"); String name=ks[i].toString(); String
   * value=infos.get(ks[i].toString());
   *
   * if(name.equals("零部件代号")){ name="图号"; }else if(name.equals("重量")){
   * name="质量"; } pro1.addAttribute("name",name); if(value.equals("一般件")){
   * value=""; }else if(value.equals("重要件")){ value="Z"; }else
   * if(value.equals("关键件")){ value="G"; } pro1.addAttribute("value",value); }
   * }else if(type.equals("辅料")){ proname.addAttribute("name","名称");
   * if(infos.get("器材简称")!=null){
   *
   * proname.addAttribute("value",infos.get("器材简称") ); }else{
   * proname.addAttribute("value",infos.get("零部件名称")); } for(int
   * i=0;i<ks.length;i++){ Element pro1=props.addElement("property"); String
   * name=ks[i].toString(); if(name.equals("零部件代号")){ name="图号"; }else
   * if(name.equals("重量")){ name="质量"; } pro1.addAttribute("name",name);
   * pro1.addAttribute("value",infos.get(ks[i].toString()) ); } }else{
   *
   * proname.addAttribute("name","名称");
   * proname.addAttribute("value",itemname); for(int i=0;i<ks.length;i++){
   * Element pro1=props.addElement("property"); String name=ks[i].toString();
   * if(name.equals("零部件代号")){ name="图号"; }else if(name.equals("重量")){
   * name="质量"; } pro1.addAttribute("name",name);
   * pro1.addAttribute("value",infos.get(ks[i].toString()) ); } } try { //
   * 将CAD信息打印出来 out.sendResultToUI(); } catch (IOException e) { // TODO
   * Auto-generated catch block e.printStackTrace(); } }
   */


  TCClassificationOperation cfop = new TCClassificationOperation();
  DefaultMutableTreeNode root;
  DefaultMutableTreeNode root1;
  DefaultMutableTreeNode root2;
  DefaultMutableTreeNode root3;
  DefaultTreeModel treeModel;
  ClassifiTableModel tableModel;
  WorkspaceTableRender tableRender;
  Dimension prefSize = new Dimension(200, 20);
  // 要获取的Form上的属性名称
  // private static Map<String, Map<String, String>> itemProps =
  // ParseRequestXML.getTCObjectProps();
  /*
   * private static Map<String, String> STpropNames = new HashMap<String,
   * String>(); private static Map<String, String> ComppropNames = new
   * HashMap<String, String>(); private static Map<String, String>
   * StuffpropNames = new HashMap<String, String>();
   *
   * static{ STpropNames.put("零部件代号", "az_PartNo"); STpropNames.put("重量",
   * "az_Weight");
   *
   * ComppropNames.put("零部件代号", "az_PartNo"); ComppropNames.put("规格型号",
   * "az_Specification"); ComppropNames.put("重量", "az_Weight");
   *
   *
   *
   * }
   */

  private Element requestBody;
  private AdaptorWriter out;
  private JFrame frame;
  private WaitDialog waitDlg;
  private ITCTCObjOperation tcop = (ITCTCObjOperation) ServiceUtil.getService(ITCTCObjOperation.class.getName(), SaveDrawingDialog.class.getClassLoader());

  // private TCObjectOperation tcop = new TCObjectOperation();

  public ClassificationPanel(Element requestBody, AdaptorWriter out, JFrame frame) {
    System.out.println("207XTCAD----ClassificationPanel-----------ClassificationPanel");
    this.frame = frame;
    this.requestBody = requestBody;
    this.out = out;
    initComponents();
    initDialog();
  }

  /**
   * @return the requestBody
   */
  public Element getRequestBody() {
    return requestBody;
  }

  /**
   * @param requestBody
   *            the requestBody to set
   */
  public void setRequestBody(Element requestBody) {
    this.requestBody = requestBody;
  }

  /**
   * @return the out
   */
  public AdaptorWriter getOut() {
    return out;
  }

  /**
   * @param out
   *            the out to set
   */
  public void setOut(AdaptorWriter out) {
    this.out = out;
  }


}
